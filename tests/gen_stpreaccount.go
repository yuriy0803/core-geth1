// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/yuriy0803/core-geth1/common"
	"github.com/yuriy0803/core-geth1/common/hexutil"
	"github.com/yuriy0803/core-geth1/common/math"
)

var _ = (*stPreAccountMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s stPreAccount) MarshalJSON() ([]byte, error) {
	type stPreAccount struct {
		Code       hexutil.Bytes               `json:"code"`
		Storage    map[storageJSON]storageJSON `json:"storage,omitempty"`
		Balance    *math.HexOrDecimal256       `json:"balance" gencodec:"required"`
		Nonce      math.HexOrDecimal64         `json:"nonce"`
		PrivateKey hexutil.Bytes               `json:"secretKey,omitempty"`
	}
	var enc stPreAccount
	enc.Code = s.Code
	if s.Storage != nil {
		enc.Storage = make(map[storageJSON]storageJSON, len(s.Storage))
		for k, v := range s.Storage {
			enc.Storage[storageJSON(k)] = storageJSON(v)
		}
	}
	enc.Balance = (*math.HexOrDecimal256)(s.Balance)
	enc.Nonce = math.HexOrDecimal64(s.Nonce)
	enc.PrivateKey = s.PrivateKey
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *stPreAccount) UnmarshalJSON(input []byte) error {
	type stPreAccount struct {
		Code       *hexutil.Bytes              `json:"code"`
		Storage    map[storageJSON]storageJSON `json:"storage,omitempty"`
		Balance    *math.HexOrDecimal256       `json:"balance" gencodec:"required"`
		Nonce      *math.HexOrDecimal64        `json:"nonce"`
		PrivateKey *hexutil.Bytes              `json:"secretKey,omitempty"`
	}
	var dec stPreAccount
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Code != nil {
		s.Code = *dec.Code
	}
	if dec.Storage != nil {
		s.Storage = make(map[common.Hash]common.Hash, len(dec.Storage))
		for k, v := range dec.Storage {
			s.Storage[common.Hash(k)] = common.Hash(v)
		}
	}
	if dec.Balance == nil {
		return errors.New("missing required field 'balance' for stPreAccount")
	}
	s.Balance = (*big.Int)(dec.Balance)
	if dec.Nonce != nil {
		s.Nonce = uint64(*dec.Nonce)
	}
	if dec.PrivateKey != nil {
		s.PrivateKey = *dec.PrivateKey
	}
	return nil
}
